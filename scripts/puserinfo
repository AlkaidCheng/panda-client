#!/bin/bash

"exec" "python" "-u" "-Wignore" "$0" "$@"


import os
import sys
import types
import optparse
import commands

# usage
usage = """%prog [options] subcommand [args]

run '%prog help' to see all available subcommands"""

# core class
class PUserInfoCore:

    # constructor
    def __init__(self,tmpLog,verbose):
        # logger
        self.tmpLog = tmpLog
        # verbose
        self.verbose = verbose
        # get list of commands
        self.subCommandList = []
        for attrName,attrVal in PUserInfoCore.__dict__.iteritems():
            if isinstance(attrVal,types.FunctionType) and (not attrName.startswith('_')):
                self.subCommandList.append(attrName) 
        # sort
        self.subCommandList.sort()

        
    # help
    def help(self,args=[]):
        if args == [] or (not args[0] in self.subCommandList) or args[0]=='help':
            print "\nAvailable subcommands:"
            for tmpCom in self.subCommandList:
                print "  %s" % tmpCom
            print "\nTry 'puserinfo help <subcommand>' for help on a specific subcommand"
            return
        print getattr(self,args[0]).__doc__


    # request
    def request(self,args=[]):
        """
        Submit access request at the site. The site is available once the
        request is approved 

        usage: puserinfo request <site>"""
        # check argument
        if args == []:
            self.tmpLog.error('Site must be given')
            return -1
        # main
        from pandatools import Client
        from pandatools import PsubUtils
        # check grid-proxy
        gridPassPhrase,vomsFQAN = PsubUtils.checkGridProxy('',False,self.verbose)
        # site ID
        siteID = args[0]
        # check siteid
        if not Client.PandaSites.has_key(siteID):
            self.tmpLog.error('Unknown site : %s' % siteID)
            return -1
        # execute    
        status,out = Client.addSiteAccess(siteID,self.verbose)
        if status != 0:
            self.tmpLog.error('Failed to submit access request')
            return
        # return
        if out == 0:
            self.tmpLog.info('Succeeded')
        elif out == -1:
            self.tmpLog.error('Database Failure')
        elif out != 'Failed':
            self.tmpLog.warning('Request already exists with status:%s' % out)
        else:
            self.tmpLog.error('Failed with %s' % out)
        return 0


    # list
    def list(self,args=[]):
        """
        Print list of sites where access is limited and the user is allowed
        to submit jobs. Or print list of permitted users at the site if the
        site is given as an argument

        usage: puserinfo list [site]"""
        from pandatools import Client
        from pandatools import PsubUtils
        # check grid-proxy
        gridPassPhrase,vomsFQAN = PsubUtils.checkGridProxy('',False,self.verbose)
        # site ID
        siteID = None
        if args != []:
            siteID = args[0]
        # execute    
        status,out = Client.listSiteAccess(siteID,self.verbose)
        if status != 0:
            print out
            self.tmpLog.error('Failed to get the list from Panda server')
            return -1
        # print
        for tmpTup in out:
            print " %20s : %s" % tmpTup
        print    
        self.tmpLog.info('Done')                
        # return
        return 0
            
        

# main
if __name__ == "__main__":

    # options
    parser = optparse.OptionParser(usage=usage,conflict_handler="resolve")
    parser.add_option('--devSrv', action='store_const', const=True, dest='devSrv',  default=False,
                      help="Please don't use this option. Only for developers to use the dev panda server")
    parser.add_option("-v",action="store_true",dest="verbose",default=False,
                      help="verbose")
    parser.add_option('--version',action='store_const',const=True,dest='version',default=False,
                      help='Displays version')

    options, args = parser.parse_args()

    # display version
    if options.version:
        from pandatools import PandaToolsPkgInfo
        print "Version: %s" % PandaToolsPkgInfo.release_version
        sys.exit(0)

    # get logger
    from pandatools import PLogger
    tmpLog = PLogger.getPandaLogger()

    # instantiate core
    pUserInfoCore = PUserInfoCore(tmpLog,options.verbose)

    # check subcommand
    if len(args) == 0:
        tmpLog.error('you need to provide a subcommand')
        sys.exit(1)
    if not args[0] in pUserInfoCore.subCommandList:
        tmpLog.error('unsupported subcommand : %s' % args[0])
        sys.exit(1)

    # decompose args to subcommand + sub args
    subCommand = args.pop(0)
    subArgs    = args

    # set dummy CMTSITE
    if not os.environ.has_key('CMTSITE'):
        os.environ['CMTSITE'] = ''

    # set grid source file
    from pandatools import GlobalConfig
    globalConf = GlobalConfig.getConfig()
    if globalConf.grid_src != '' and not os.environ.has_key('PATHENA_GRID_SETUP_SH'):
        os.environ['PATHENA_GRID_SETUP_SH'] = globalConf.grid_src

    # use dev server
    if options.devSrv:
        from pandatools import Client
        Client.useDevServer()

    # main
    subMethod = getattr(pUserInfoCore,subCommand)
    exitCode = apply(subMethod,[],{'args':subArgs})
    sys.exit(exitCode)
